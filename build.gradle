def jSpringBootVersion='2.1.9.RELEASE'
def jUnitVersion='5.4.2'

buildscript {
    ext{
        jSpringBootVersion='2.1.9.RELEASE'
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$jSpringBootVersion")
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'pmd'
apply plugin: 'jacoco'

group = 'com.hillel.evo'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

application {
    mainClassName = 'com.hillel.evo.adviser.starter.AdviserStarter'
}

bootJar {
    manifest {
        attributes 'Start-Class': 'com.hillel.evo.adviser.starter.AdviserStarter'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter:$jUnitVersion"
    implementation 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

pmd {
    toolVersion = '6.18.0'
    consoleOutput= true
    sourceSets = [sourceSets.main]
    reportsDir = file("build/reports/pmd")
}

jacoco {
    toolVersion = '0.8.4'
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: ['**/dto/**', '**/starter/**', '**/entity/**', '**/*Main*/**', '**/exception/**', '**/configuration/**', '**/filter/**']
            )
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: ['**/dto/**', '**/starter/**', '**/entity/**', '**/*Main*/**', '**/exception/**', '**/configuration/**', '**/filter/**']
            )
        })
    }
    violationRules {

        rule {
            //element = 'METHOD'
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }

        rule {
            //element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }

        }
        rule {
            //element = 'INSTRUCTION'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
        rule {
            //element = 'BRANCH'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }

}

test {
    useJUnitPlatform()
}

check.dependsOn jacocoTestCoverageVerification
test.finalizedBy jacocoTestReport